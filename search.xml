<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[hello]]></title>
      <url>http://www.duduforlove.com/2016/05/17/hello-1/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[聊一聊大型网站架构设计]]></title>
      <url>http://www.duduforlove.com/2016/05/13/hello/</url>
      <content type="html"><![CDATA[<h2 id="一切都源于用户需求"><a href="#一切都源于用户需求" class="headerlink" title="一切都源于用户需求"></a>一切都源于用户需求</h2><p>&#160; &#160; &#160; &#160;这是一个老生常谈的话题，也是一个纷乱繁复的话题，我尝试着去找到一个恰当的切入点，我发现我找不到，因为这个话题他可以写一本书，他包含的知识点真的太多太多，我情不自禁的梳理了一遍，却发现我渐渐学习和掌握的每一个知识点，正好对应了这个时代网站架构的变迁。</p>
<p>&#160; &#160; &#160; &#160;网站架构为什么会发生变迁？当网站提供的服务满足不了用户需求的时候，我们就需要做出改变。怎么去改变，从用户体验角度看，我们不可能强制限制用户的需求，我们只能通过提升我们提供的服务来满足日益增长的用户。所以，<strong><code>网站架构发生变迁的根本都源于用户需求的不断增加</code></strong>。</p>
<h2 id="网站架构的变迁"><a href="#网站架构的变迁" class="headerlink" title="网站架构的变迁"></a>网站架构的变迁</h2><p>&#160; &#160; &#160; &#160;我们从不同用户需求的层次来剖析网站架构的变迁。</p>
<p>&#160; &#160; &#160; &#160;我们从搭建一个简单的电商网站开始，我们假设初期的用户数很少，网站的uv只有100，pv只有1000，网站的业务也极其简单，这种情况下，我们说网站是不用考虑任何的性能瓶颈的，我们可以用一个简单的web应用程式和一个数据库然后部署到一台单独的物理机器即可。</p>
<p>&#160; &#160; &#160; &#160;随着岁月的变迁，网站的用户数慢慢开始积累，网站的业务复杂度也慢慢开始增加，这时候我们发现一台物理机器处理用户请求的响应时间和cpu使用率开始增加，io吞吐量开始下降，这时候我们说这台物理机器的性能已经出现了瓶颈，我们需要提升物理服务器的性能，当然我们可以增大物理内存增加cpu，但是这种方式并不能从根本上解决问题，我们一般会采用另一种方式，将应用服务器、数据库服务器、图片文件服务器分离，并根据各自服务器自身特性和用途来配置不同的硬件，来达到最好的性能效果。</p>
<p>&#160; &#160; &#160; &#160;服务器分离是一个好的开端，我们发现单台服务器解决不了的问题，我们可以通过多台服务器来协同解决，这样看来问题似乎就简洁清晰许多了。通常而言，某种物事在质量上的提升是比较困难的，但是如果能从数量上来改变从而达到质变的效果，那就会简单很多。就这样，集群的概念出现了。随着用户规模的不断扩大，单台应用服务器无法处理用户请求的时候，我们可以通过应用服务器集群来改善应用服务器的性能。其原理也非常简单，就是在应用服务器前面通过负载均衡调度用户请求，将用户请求分发到多个服务器节点上去。常用的负载均衡软件有LVS、nginx、HAProxy等，LVS分发路径优于nginx和HAProxy，性能会略高一些。使用应用服务器集群也需要考虑因为集群环境带来的一些问题，比如session的管理，多台服务器之间如何使session保持一致，目前主流的做法是使用基于cache存储的分布式session来实现session的共享。再比如分布式环境如何实现临界资源（同步互斥）的访问？在单机环境下，我们可以很方便的使用synchronized或者lock来实现临界资源的访问，但是分布式集群环境，这种方式就无效了，目前主流的做法是<a href="http://blog.arganzheng.me/posts/use-zookeeper-for-distribute-lock.html" target="_blank" rel="external">使用zookeeper来实现分布式锁</a>。在比如分布式系统难以解决却又非常重要的一个问题，分布式事务的挑战，我们往往并不是去直接保证分布式系统事务的强一致性，而是保证数据的最终一致性，换句话说，我们往往允许系统在非常短的时间内出现数据不一致的情况，我们只需要保证最终数据一致即可。除了以上非常常见的问题之外，分布式系统较之单机系统还会有非常的问题需要去解决，如果系统业务依赖时序，如何保证每个节点的时钟完全一致？分布式系统的提出，除了用于提升应用服务器性能之外，也保证了整个系统的可靠性，那么如何去避免出现单点故障？出现单点故障如何做到自动恢复等等。分布式系统极大的改善和提高了应用服务器的性能，但是较之单机系统也在一定程度上面增加了业务的复杂度，依稀还记得哪位大牛曾经说过，最好的分布式系统设计，就是尽量不要使用分布式。看似有点矛盾，有点装x，但是我觉得真正道出了分布式系统和单机系统设计取舍的一种平衡点。</p>
<p>&#160; &#160; &#160; &#160;应用服务器的性能瓶颈似乎看起来已经解决了，通过应用服务器集群来改善服务器的性能在不考虑业务复杂度的情况下是一个完美的解决方案。但是，对于整个系统来说，数据库访问同样面临着严重的性能问题。有了应用服务器集群的经验，我们很自然的想到数据库集群解决方案。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[聊一聊大型网站架构设计]]></title>
      <url>http://www.duduforlove.com/2016/05/13/my-new-post/</url>
      <content type="html"><![CDATA[<h2 id="一切都源于用户需求"><a href="#一切都源于用户需求" class="headerlink" title="一切都源于用户需求"></a>一切都源于用户需求</h2><p>&#160; &#160; &#160; &#160;这是一个老生常谈的话题，也是一个纷乱繁复的话题，我尝试着去找到一个恰当的切入点，我发现我找不到，因为这个话题他可以写一本书，他包含的知识点真的太多太多，我情不自禁的梳理了一遍，却发现我渐渐学习和掌握的每一个知识点，正好对应了这个时代网站架构的变迁。<a id="more"></a> </p>
<p>&#160; &#160; &#160; &#160;网站架构为什么会发生变迁？当网站提供的服务满足不了用户需求的时候，我们就需要做出改变。怎么去改变，从用户体验角度看，我们不可能强制限制用户的需求，我们只能通过提升我们提供的服务来满足日益增长的用户。所以，<strong><code>网站架构发生变迁的根本都源于用户需求的不断增加</code></strong>。</p>
<h2 id="网站架构的变迁"><a href="#网站架构的变迁" class="headerlink" title="网站架构的变迁"></a>网站架构的变迁</h2><p>&#160; &#160; &#160; &#160;我们从不同用户需求的层次来剖析网站架构的变迁。</p>
<p>&#160; &#160; &#160; &#160;我们从搭建一个简单的电商网站开始，我们假设初期的用户数很少，网站的uv只有100，pv只有1000，网站的业务也极其简单，这种情况下，我们说网站是不用考虑任何的性能瓶颈的，我们可以用一个简单的web应用程式和一个数据库然后部署到一台单独的物理机器即可。</p>
<p>&#160; &#160; &#160; &#160;随着岁月的变迁，网站的用户数慢慢开始积累，网站的业务复杂度也慢慢开始增加，这时候我们发现一台物理机器处理用户请求的响应时间和cpu使用率开始增加，io吞吐量开始下降，这时候我们说这台物理机器的性能已经出现了瓶颈，我们需要提升物理服务器的性能，当然我们可以增大物理内存增加cpu，但是这种方式并不能从根本上解决问题，我们一般会采用另一种方式，将应用服务器、数据库服务器、图片文件服务器分离，并根据各自服务器自身特性和用途来配置不同的硬件，来达到最好的性能效果。</p>
<p>&#160; &#160; &#160; &#160;服务器分离是一个好的开端，我们发现单台服务器解决不了的问题，我们可以通过多台服务器来协同解决，这样看来问题似乎就简洁清晰许多了。通常而言，某种物事在质量上的提升是比较困难的，但是如果能从数量上来改变从而达到质变的效果，那就会简单很多。就这样，集群的概念出现了。随着用户规模的不断扩大，单台应用服务器无法处理用户请求的时候，我们可以通过应用服务器集群来改善应用服务器的性能。其原理也非常简单，就是在应用服务器前面通过负载均衡调度用户请求，将用户请求分发到多个服务器节点上去。常用的负载均衡软件有LVS、nginx、HAProxy等，LVS分发路径优于nginx和HAProxy，性能会略高一些。使用应用服务器集群也需要考虑因为集群环境带来的一些问题，比如session的管理，多台服务器之间如何使session保持一致，目前主流的做法是使用基于cache存储的分布式session来实现session的共享。再比如分布式环境如何实现临界资源（同步互斥）的访问？在单机环境下，我们可以很方便的使用synchronized或者lock来实现临界资源的访问，但是分布式集群环境，这种方式就无效了，目前主流的做法是<a href="http://blog.arganzheng.me/posts/use-zookeeper-for-distribute-lock.html" target="_blank" rel="external">使用zookeeper来实现分布式锁</a>。在比如分布式系统难以解决却又非常重要的一个问题，分布式事务的挑战，我们往往并不是去直接保证分布式系统事务的强一致性，而是保证数据的最终一致性，换句话说，我们往往允许系统在非常短的时间内出现数据不一致的情况，我们只需要保证最终数据一致即可。除了以上非常常见的问题之外，分布式系统较之单机系统还会有非常的问题需要去解决，如果系统业务依赖时序，如何保证每个节点的时钟完全一致？分布式系统的提出，除了用于提升应用服务器性能之外，也保证了整个系统的可靠性，那么如何去避免出现单点故障？出现单点故障如何做到自动恢复等等。分布式系统极大的改善和提高了应用服务器的性能，但是较之单机系统也在一定程度上面增加了业务的复杂度，依稀还记得哪位大牛曾经说过，最好的分布式系统设计，就是尽量不要使用分布式。看似有点矛盾，有点装x，但是我觉得真正道出了分布式系统和单机系统设计取舍的一种平衡点。</p>
<p>&#160; &#160; &#160; &#160;应用服务器的性能瓶颈似乎看起来已经解决了，通过应用服务器集群来改善服务器的性能在不考虑业务复杂度的情况下是一个完美的解决方案。但是，对于整个系统来说，数据库访问同样面临着严重的性能问题。有了应用服务器集群的经验，我们很自然的想到数据库集群解决方案。</p>
]]></content>
    </entry>
    
  
  
</search>
